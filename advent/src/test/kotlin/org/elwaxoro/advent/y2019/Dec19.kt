package org.elwaxoro.advent.y2019

import kotlinx.coroutines.runBlocking
import org.elwaxoro.advent.Coord
import org.elwaxoro.advent.PuzzleDayTester

/**
 * Day 19: Tractor Beam
 */
class Dec19 : PuzzleDayTester(19, 2019) {

    /**
     * Didn't initially realize the intcode program takes 2 inputs, produces one output, then exits
     * First attempt was prepared to live stream all inputs and outputs in a single run
     * This is WAY simpler and reusable for part 2
     *
     * Part 1 visualization:
     * Note that increasing Y is "down" or "lower"
     * [0,0] to [49,49]
     * #.................................................
     * ..................................................
     * ...#..............................................
     * ..................................................
     * ......#...........................................
     * .......#..........................................
     * .........#........................................
     * ..........##......................................
     * ...........##.....................................
     * .............##...................................
     * ..............##..................................
     * ...............###................................
     * .................###..............................
     * ..................###.............................
     * ....................###...........................
     * .....................###..........................
     * ......................####........................
     * ........................###.......................
     * .........................####.....................
     * ..........................#####...................
     * ............................####..................
     * .............................#####................
     * ..............................#####...............
     * ................................#####.............
     * .................................######...........
     * ..................................######..........
     * ....................................######........
     * .....................................######.......
     * .......................................######.....
     * ........................................#######...
     * .........................................#######..
     * ...........................................#######
     * ............................................######
     * .............................................#####
     * ...............................................###
     * ................................................##
     * .................................................#
     * ..................................................
     * ..................................................
     * ..................................................
     * ..................................................
     * ..................................................
     * ..................................................
     * ..................................................
     * ..................................................
     * ..................................................
     * ..................................................
     * ..................................................
     * ..................................................
     * ..................................................
     */
    override fun part1(): Any = runBlocking {
        TractorBeam(loadToLong(delimiter = ",")).let { t ->
            (0..49L).sumOf { y -> (0..49L).count { x -> t.placeDrone(x, y) } }
        }
    } == 131

    /**
     * Need to find a drone position (x,y) where (x+99,y) and (x,y-99) are also inside the beam
     * From part 1 output, the slope of the beam is less than 45 degrees
     * Could probably calculate the slope of the top and bottom edges, then math it in one shot?
     *
     * Lazy idea: beam surfer! let's follow the "bottom" edge of the beam. start at (100,100) and repeat these steps:
     * start at 100, 100 so all coordinates are always positive per "Negative numbers are invalid and will confuse the drone"
     * 1. test (x,y)
     * 2. if pass: test "opposite" (x+99, y-99). if that passes too we're done (answer is (x, y-99)), if not, move down
     * 3. if fail: move right
     * 4. repeat!
     * This solution totally worked! and only takes about 168ms so not really worth further optimization
     */
    override fun part2(): Any = runBlocking { beamSurfer(100, 100, TractorBeam(loadToLong(delimiter = ","))).let { a -> a.x * 10000 + a.y } } == 15231022

    private suspend fun beamSurfer(x: Int, y: Int, t: TractorBeam): Coord =
        if (t.placeDrone(x, y)) {
            if (t.placeDrone(x + 99, y - 99)) {
                Coord(x, y - 99)
            } else {
                beamSurfer(x, y + 1, t)
            }
        } else {
            beamSurfer(x + 1, y, t)
        }

    private class TractorBeam(
        val code: List<Long>,
    ) {
        suspend fun placeDrone(x: Int, y: Int): Boolean = placeDrone(x.toLong(), y.toLong())

        suspend fun placeDrone(x: Long, y: Long): Boolean {
            val input = mutableListOf(x, y)
            var out = -1L
            ElfCode(code).runner(
                setup = ElfCode.memExpander(5000),
                input = { input.removeFirst() },
                output = { out = it },
            )
            return out == 1L
        }
    }
}
